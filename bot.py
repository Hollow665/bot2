import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from huggingface_hub import InferenceClient

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
HF_TOKEN = os.getenv("HF_TOKEN")

# –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –≤—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π
if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
if not HF_TOKEN:
    raise ValueError("HF_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Hugging Face
client = InferenceClient(token=HF_TOKEN)

# –ú–æ–¥–µ–ª—å –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
TEXT_MODEL = "mistralai/Mixtral-8x7B-Instruct-v0.1"

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
keyboard = ReplyKeyboardMarkup(
    [["–î–∞–π –º–æ—Ç–∏–≤–∞—Ü–∏—é!", "–ü–æ–º–æ–≥–∏ —Å –∑–∞–¥–∞—á–µ–π"]],
    resize_keyboard=True,
    one_time_keyboard=False
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ë–æ—Ç! üåü\n"
        "–Ø —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å —Ç–µ–±—è –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏. "
        "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–Ø —É—Å—Ç–∞–ª' –∏–ª–∏ '–ö–∞–∫ –±—ã—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ?'), "
        "–∏ —è –¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è!",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text

    if user_text == "–î–∞–π –º–æ—Ç–∏–≤–∞—Ü–∏—é!":
        prompt = "–î–∞–π –º–æ—Ç–∏–≤–∏—Ä—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É –∏–ª–∏ —Å–æ–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —á—Ç–æ–±—ã –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥."
    elif user_text == "–ü–æ–º–æ–≥–∏ —Å –∑–∞–¥–∞—á–µ–π":
        prompt = "–î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–∞–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –∑–∞–¥–∞—á–µ–π –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É."
    else:
        prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: '{user_text}'. –î–∞–π –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —É—á–∏—Ç—ã–≤–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ä–∞–∑–∏–ª –ø—Ä–æ–±–ª–µ–º—É, –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—à–µ–Ω–∏–µ. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–±—â–∏–π, –¥–∞–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Å–æ–≤–µ—Ç."

    try:
        response = client.chat_completion(
            model=TEXT_MODEL,
            messages=[{"role": "user", "content": prompt}],
            max_tokens=300,
            temperature=0.7
        )
        await update.message.reply_text(response.choices[0].message.content)
    except Exception as e:
        await update.message.reply_text(f"–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # Render –¥–∞–µ—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT, –Ω–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
    port = int(os.environ.get("PORT", 8080))
    app.run_polling()

if __name__ == '__main__':
    main()
